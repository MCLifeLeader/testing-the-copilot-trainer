@page "/chat"
@inject IJSRuntime JSRuntime

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

<div class="chat-container">
    <div class="chat-messages" id="chatMessages">
        @foreach (var message in messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "bot-message")">
                <div class="message-content">
                    @message.Content
                </div>
                <div class="message-time">
                    @message.Timestamp.ToString("HH:mm")
                </div>
            </div>
        }
    </div>
    
    <div class="chat-input-area">
        <div class="input-group">
            <input type="text" 
                   class="form-control" 
                   placeholder="Type your message..." 
                   @bind="currentMessage" 
                   @onkeypress="OnKeyPress" 
                   @ref="inputElement" />
            <button class="btn btn-primary" 
                    type="button" 
                    @onclick="SendMessage"
                    disabled="@(string.IsNullOrWhiteSpace(currentMessage))">
                Send
            </button>
        </div>
    </div>
</div>

@code {
    private string currentMessage = string.Empty;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private ElementReference inputElement;

    protected override void OnInitialized()
    {
        // Add some sample messages for demonstration
        messages.Add(new ChatMessage { Content = "Hello! How can I help you today?", IsUser = false, Timestamp = DateTime.Now.AddMinutes(-5) });
        messages.Add(new ChatMessage { Content = "Hi there! I'm testing the chat functionality.", IsUser = true, Timestamp = DateTime.Now.AddMinutes(-4) });
        messages.Add(new ChatMessage { Content = "Great! The chat is working well. Feel free to ask me anything.", IsUser = false, Timestamp = DateTime.Now.AddMinutes(-3) });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToBottom();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage))
            return;

        // Add user message
        messages.Add(new ChatMessage 
        { 
            Content = currentMessage, 
            IsUser = true, 
            Timestamp = DateTime.Now 
        });

        var userMessage = currentMessage;
        currentMessage = string.Empty;

        // Trigger UI update
        StateHasChanged();
        await ScrollToBottom();

        // Simulate bot response with some variety
        await Task.Delay(1000); // Simulate thinking time
        
        var responses = new[]
        {
            "That's interesting! Can you tell me more?",
            "I understand. Is there anything specific you'd like to know?",
            "Thanks for sharing that with me.",
            "That's a great question! Let me think about that.",
            "I see what you mean. How can I help you with that?",
            "That sounds important. Would you like to explore this further?",
            "I appreciate you bringing that up. What are your thoughts on it?",
            "That's a good point. Is there anything else you'd like to discuss?"
        };
        
        var random = new Random();
        var response = responses[random.Next(responses.Length)];
        
        messages.Add(new ChatMessage 
        { 
            Content = response, 
            IsUser = false, 
            Timestamp = DateTime.Now 
        });

        StateHasChanged();
        await ScrollToBottom();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
    }

    public class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
    }
}
@page "/chat"
@inject IJSRuntime JSRuntime
@inject ChatApiClient ChatApi
@using MyChatApp.Web.Models

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

<div class="chat-container">
    <div class="chat-messages" id="chatMessages">
        @foreach (var message in messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "bot-message")">
                <div class="message-content">
                    @message.Content
                </div>
                <div class="message-time">
                    @message.Timestamp.ToString("HH:mm")
                </div>
            </div>
        }
    </div>
    
    <div class="chat-input-area">
        <div class="input-group">
            <input type="text" 
                   class="form-control" 
                   placeholder="Type your message..." 
                   @bind="currentMessage"
                   @bind:event="oninput"
                   @onkeypress="OnKeyPress" 
                   @ref="inputElement" />
            <button class="btn btn-primary" 
                    type="button" 
                    @onclick="SendMessage"
                    disabled="@(string.IsNullOrWhiteSpace(currentMessage))">
                Send
            </button>
        </div>
    </div>
</div>

@code {
    private string currentMessage = string.Empty;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private ElementReference inputElement;

    protected override void OnInitialized()
    {
        // Add some sample messages for demonstration
        messages.Add(new ChatMessage("Hello! How can I help you today?", false, DateTime.Now.AddMinutes(-5)));
        messages.Add(new ChatMessage("Hi there! I'm testing the chat functionality.", true, DateTime.Now.AddMinutes(-4)));
        messages.Add(new ChatMessage("Great! The chat is working well. Feel free to ask me anything.", false, DateTime.Now.AddMinutes(-3)));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToBottom();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage))
            return;

        // Add user message
        messages.Add(new ChatMessage(currentMessage, true, DateTime.Now));

        var userMessage = currentMessage;
        currentMessage = string.Empty;

        // Trigger UI update
        StateHasChanged();
        
        // Try to scroll to bottom, but don't let it fail the whole operation
        try
        {
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            // Log error but continue - scrolling failure shouldn't break chat
            Console.WriteLine($"Scroll error: {ex.Message}");
        }

        try
        {
            // Call API to get response
            var apiResponse = await ChatApi.SendMessageAsync(userMessage);
            
            if (apiResponse is not null)
            {
                messages.Add(new ChatMessage(apiResponse.Content, false, apiResponse.Timestamp));
            }
            else
            {
                // Fallback response if API fails
                messages.Add(new ChatMessage("I'm having trouble connecting right now. Please try again later.", false, DateTime.Now));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API error: {ex.Message}");
            // Fallback response if API fails
            messages.Add(new ChatMessage("I'm having trouble connecting right now. Please try again later.", false, DateTime.Now));
        }

        StateHasChanged();
        
        // Try to scroll to bottom again
        try
        {
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Scroll error: {ex.Message}");
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
    }
}